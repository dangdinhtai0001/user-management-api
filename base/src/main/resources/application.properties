#  =============== CUSTOM ===============
application.path.prefix=api
application.version.service=v0
application.version.build=1.0.0-BETA
application.jwt.secret=T2VLzjTvmjCGDjxP
application.jwt.expired=36000000
# ==================================================
#  =============== CUSTOM ===============
# ==================================================
spring.banner.location=classpath:/banner.txt
spring.application.name=phoenix template
server.servlet.contextPath=/${application.path.prefix}/${application.version.service}
server.port=8090
# ==================================================
# ==================================================
# Session store type.
# ==================================================
spring.session.store-type=jdbc
# ==================================================
# ==================================================
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#maximum number of milliseconds that a client will wait for a connection
spring.datasource.hikari.connection-timeout=30000
#minimum number of idle connections maintained by HikariCP in a connection pool
spring.datasource.hikari.minimum-idle=10
#maximum pool size
spring.datasource.hikari.maximum-pool-size=10
#maximum idle time for connection
#spring.datasource.hikari.idle-timeout=10000
# maximum lifetime in milliseconds of a connection in the pool after it is closed.
spring.datasource.hikari.max-lifetime=1800000
#default auto-commit behavior.
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.pool-name=default-hikari-cp
# ==================================================
spring.session.jdbc.initialize-schema=never
# ==================================================
# JPA specific configs
# ==================================================
spring.jpa.properties.hibernate.use_sql=true
spring.jpa.properties.hibernate.id.new_generator_mappings=false
spring.jpa.properties.hibernate.search.autoregister_listeners=false
spring.jpa.properties.hibernate.bytecode.use_reflection_optimizer=false
spring.jpa.properties.hibernate.jdbc.batch_size=5
spring.jpa.properties.hibernate.show-sql=true
spring.jpa.open-in-view=false
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.format_sql=true
# ==================================================
# ==================================================
logging.level.org.hibernate.SQL=INFO
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG
# ==================================================
# ==================================================
# https://www.javadevjournal.com/spring-boot/gson-with-spring-boot/
# Property for making Gson as preferred Json Mapper
spring.mvc.converters.preferred-json-mapper=gson
# Format to use when serializing Date objects.
spring.gson.date-format=dd-MM-yyyy
# Whether to disable the escaping of HTML characters such as '<', '>', etc.
spring.gson.disable-html-escaping=
# Whether to exclude inner classes during serialization.
spring.gson.disable-inner-class-serialization=
# Whether to enable serialization of complex map keys (i.e. non-primitives).
spring.gson.enable-complex-map-key-serialization=
# Whether to exclude all fields from consideration for serialization or deserialization that do not have the "Expose" annotation.
spring.gson.exclude-fields-without-expose-annotation=
# Naming policy that should apply to an object's field during serialization and deserialization.
spring.gson.field-naming-policy=
# Whether to generate non executable JSON by prefixing the output with some special text.
spring.gson.generate-non-executable-json=
# Whether to be lenient about parsing JSON that doesn't conform to RFC 4627.
spring.gson.lenient=
# Serialization policy for Long and long types.
spring.gson.long-serialization-policy=
# Whether to output serialized JSON that fits in a page for pretty printing.
spring.gson.pretty-printing=true
# Whether to serialize null fields.
spring.gson.serialize-nulls=false

